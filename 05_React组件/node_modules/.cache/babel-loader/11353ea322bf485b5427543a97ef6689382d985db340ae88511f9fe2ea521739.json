{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/react_study/05_React\\u7EC4\\u4EF6/src/components/Logs/LogItem/LogItem.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport MyDate from './MyDate/MyDate';\nimport './LogItem.css';\nimport Card from '../../UI/Card/Card';\nimport ConfirmModal from \"../../UI/ConfirmModal/ConfirmModal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LogItem = props => {\n  _s();\n  // 添加一个state,记录是否显示模态窗口\n  const [showConfirm, setShowConfirm] = useState(false);\n\n  // 在函数式组件中,属性就相当于函数的参数,可以通过参数来访问\n  // 可以在函数式组件中定义一个props,props指向的是一个对象\n  // 它包含了父组件中的所有参数\n  // console.log(props)\n\n  /**\n   * props属性是只读,不可修改!\n   */\n  // props.desc = 'vue.js' // 不能修改props属性\n  // console.log(props.desc)\n\n  /**\n   * 删除item的响应函数\n   */\n  const deleteItemHandler = () => {\n    // 显示确认窗口\n    setShowConfirm(true);\n\n    // 临时性\n    // const isDel = window.confirm('该操作不可恢复，确认吗?')\n    // if (isDel) {\n    //     // 删除当前的item,其实就是从数据的state中移除指定的数据\n    //     // props.onDelLog(props.logIndex)\n    //     props.onDelLog()\n    // }\n  };\n\n  /**\n   * 取消函数\n   */\n  const cancelHandler = () => {\n    setShowConfirm(false);\n  };\n\n  /**\n   * 确认函数\n   */\n  const okHandler = () => {\n    props.onDelLog();\n  };\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: \"item\",\n    children: [showConfirm && /*#__PURE__*/_jsxDEV(ConfirmModal, {\n      onOK: okHandler,\n      onCancel: cancelHandler,\n      confirmText: \"\\u8BE5\\u64CD\\u4F5C\\u4E0D\\u53EF\\u6062\\u590D\\uFF01\\u8BF7\\u786E\\u8BA4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 29\n    }, this), /*#__PURE__*/_jsxDEV(MyDate, {\n      date: props.date\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"desc\",\n        children: props.desc\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"time\",\n        children: [props.time, \"\\u5206\\u949F\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: deleteItemHandler,\n        className: 'delete',\n        children: \"\\xD7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n};\n_s(LogItem, \"07w5HhsPbG9uHJfYjLCIuUrAXBQ=\");\n_c = LogItem;\nexport default LogItem;\nvar _c;\n$RefreshReg$(_c, \"LogItem\");","map":{"version":3,"names":["React","useState","MyDate","Card","ConfirmModal","jsxDEV","_jsxDEV","LogItem","props","_s","showConfirm","setShowConfirm","deleteItemHandler","cancelHandler","okHandler","onDelLog","className","children","onOK","onCancel","confirmText","fileName","_jsxFileName","lineNumber","columnNumber","date","desc","time","onClick","_c","$RefreshReg$"],"sources":["/Users/mac/Desktop/react_study/05_React组件/src/components/Logs/LogItem/LogItem.js"],"sourcesContent":["import React, {useState} from 'react'\nimport MyDate from './MyDate/MyDate'\nimport './LogItem.css'\nimport Card from '../../UI/Card/Card'\nimport ConfirmModal from \"../../UI/ConfirmModal/ConfirmModal\";\n\nconst LogItem = props => {\n\n    // 添加一个state,记录是否显示模态窗口\n    const [showConfirm, setShowConfirm] = useState(false)\n\n    // 在函数式组件中,属性就相当于函数的参数,可以通过参数来访问\n    // 可以在函数式组件中定义一个props,props指向的是一个对象\n    // 它包含了父组件中的所有参数\n    // console.log(props)\n\n    /**\n     * props属性是只读,不可修改!\n     */\n    // props.desc = 'vue.js' // 不能修改props属性\n    // console.log(props.desc)\n\n    /**\n     * 删除item的响应函数\n     */\n    const deleteItemHandler = () => {\n\n        // 显示确认窗口\n        setShowConfirm(true)\n\n        // 临时性\n        // const isDel = window.confirm('该操作不可恢复，确认吗?')\n        // if (isDel) {\n        //     // 删除当前的item,其实就是从数据的state中移除指定的数据\n        //     // props.onDelLog(props.logIndex)\n        //     props.onDelLog()\n        // }\n    }\n\n    /**\n     * 取消函数\n     */\n    const cancelHandler = () => {\n        setShowConfirm(false)\n    }\n\n    /**\n     * 确认函数\n     */\n    const okHandler = () => {\n        props.onDelLog()\n    }\n\n    return (\n        <Card className=\"item\">\n\n            {showConfirm && <ConfirmModal onOK={okHandler} onCancel={cancelHandler} confirmText=\"该操作不可恢复！请确认\"/>}\n\n            <MyDate date={props.date}/>\n\n            {/* 日志内容的容器 */}\n            <div className=\"content\">\n                {/*\n              如果将组件中的数据全部写死,将会导致组件无法动态设置,不具有使用价值\n                我们希望组件中的数据可以由外部设置,在组件中,父组件可以通过props(属性)传递数据给子组件\n          */}\n                <h2 className=\"desc\">{props.desc}</h2>\n                <div className=\"time\">{props.time}分钟</div>\n            </div>\n            {/* 添加一个删除组件 */}\n            <div>\n                <div onClick={deleteItemHandler} className={'delete'}>×</div>\n            </div>\n        </Card>\n    )\n}\n\nexport default LogItem\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,QAAO,OAAO;AACrC,OAAOC,MAAM,MAAM,iBAAiB;AACpC,OAAO,eAAe;AACtB,OAAOC,IAAI,MAAM,oBAAoB;AACrC,OAAOC,YAAY,MAAM,oCAAoC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9D,MAAMC,OAAO,GAAGC,KAAK,IAAI;EAAAC,EAAA;EAErB;EACA,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;;EAErD;EACA;EACA;EACA;;EAEA;AACJ;AACA;EACI;EACA;;EAEA;AACJ;AACA;EACI,MAAMW,iBAAiB,GAAGA,CAAA,KAAM;IAE5B;IACAD,cAAc,CAAC,IAAI,CAAC;;IAEpB;IACA;IACA;IACA;IACA;IACA;IACA;EACJ,CAAC;;EAED;AACJ;AACA;EACI,MAAME,aAAa,GAAGA,CAAA,KAAM;IACxBF,cAAc,CAAC,KAAK,CAAC;EACzB,CAAC;;EAED;AACJ;AACA;EACI,MAAMG,SAAS,GAAGA,CAAA,KAAM;IACpBN,KAAK,CAACO,QAAQ,CAAC,CAAC;EACpB,CAAC;EAED,oBACIT,OAAA,CAACH,IAAI;IAACa,SAAS,EAAC,MAAM;IAAAC,QAAA,GAEjBP,WAAW,iBAAIJ,OAAA,CAACF,YAAY;MAACc,IAAI,EAAEJ,SAAU;MAACK,QAAQ,EAAEN,aAAc;MAACO,WAAW,EAAC;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eAEnGlB,OAAA,CAACJ,MAAM;MAACuB,IAAI,EAAEjB,KAAK,CAACiB;IAAK;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eAG3BlB,OAAA;MAAKU,SAAS,EAAC,SAAS;MAAAC,QAAA,gBAKpBX,OAAA;QAAIU,SAAS,EAAC,MAAM;QAAAC,QAAA,EAAET,KAAK,CAACkB;MAAI;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACtClB,OAAA;QAAKU,SAAS,EAAC,MAAM;QAAAC,QAAA,GAAET,KAAK,CAACmB,IAAI,EAAC,cAAE;MAAA;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzC,CAAC,eAENlB,OAAA;MAAAW,QAAA,eACIX,OAAA;QAAKsB,OAAO,EAAEhB,iBAAkB;QAACI,SAAS,EAAE,QAAS;QAAAC,QAAA,EAAC;MAAC;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5D,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEf,CAAC;AAAAf,EAAA,CArEKF,OAAO;AAAAsB,EAAA,GAAPtB,OAAO;AAuEb,eAAeA,OAAO;AAAA,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}