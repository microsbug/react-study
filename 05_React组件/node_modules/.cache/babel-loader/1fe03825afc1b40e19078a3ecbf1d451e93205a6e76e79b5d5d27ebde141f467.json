{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/react_study/05_React\\u7EC4\\u4EF6/src/App.js\",\n  _s = $RefreshSig$();\nimport Logs from './components/Logs/Logs';\nimport LogsForm from './components/LogsForm/LogsForm';\nimport './App.css';\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  // 模拟一组从服务器中获取的数据\n  const [logsData, setLogsData] = useState([{\n    id: '001',\n    date: new Date(2023, 1, 1, 15, 20),\n    desc: '学习前端React',\n    time: '20'\n  }, {\n    id: '002',\n    date: new Date(2023, 1, 11, 15, 30),\n    desc: '学习前端Angular',\n    time: '30'\n  }, {\n    id: '003',\n    date: new Date(2023, 1, 12, 15, 40),\n    desc: '学习前端Vue',\n    time: '50'\n  }, {\n    id: '004',\n    date: new Date(2023, 1, 13, 15, 50),\n    desc: '学习前端JavaScript',\n    time: '10'\n  }]);\n\n  /**\n   *下一步：\n   *  将logsForm中的数据传递给App组件，然后App组件将新的日志添加到数组中！\n   */\n\n  /**\n   * 定义一个函数\n   */\n  const saveLogHandler = newLog => {\n    //向新的日志中添加id\n    newLog.id = Date.now() + '';\n    // console.log('App.js -> ', newLog)\n\n    // 将新的数据添加到数组中\n    // logsData.push(newLog)\n    setLogsData([...logsData, newLog]);\n  };\n\n  /**\n   * 定义一个函数，从日志中删除一条日志\n   */\n  const delLogByIndex = index => {\n    // logsData.splice(index, 1)\n    setLogsData(prevState => [...prevState].slice(index, 1));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(LogsForm, {\n      onSaveLog: saveLogHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Logs, {\n      logsData: logsData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"043RtRqlsblbZ4F5c1cWLSUinf4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Logs","LogsForm","useState","jsxDEV","_jsxDEV","App","_s","logsData","setLogsData","id","date","Date","desc","time","saveLogHandler","newLog","now","delLogByIndex","index","prevState","slice","className","children","onSaveLog","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mac/Desktop/react_study/05_React组件/src/App.js"],"sourcesContent":["import Logs from './components/Logs/Logs'\nimport LogsForm from './components/LogsForm/LogsForm'\nimport './App.css'\nimport {useState} from \"react\";\n\nconst App = () => {\n\n    // 模拟一组从服务器中获取的数据\n    const [logsData, setLogsData] = useState([{\n        id: '001',\n        date: new Date(2023, 1, 1, 15, 20),\n        desc: '学习前端React',\n        time: '20'\n    },\n        {\n            id: '002',\n            date: new Date(2023, 1, 11, 15, 30),\n            desc: '学习前端Angular',\n            time: '30'\n        },\n        {\n            id: '003',\n            date: new Date(2023, 1, 12, 15, 40),\n            desc: '学习前端Vue',\n            time: '50'\n        },\n        {\n            id: '004',\n            date: new Date(2023, 1, 13, 15, 50),\n            desc: '学习前端JavaScript',\n            time: '10'\n        }\n    ])\n\n    /**\n     *下一步：\n     *  将logsForm中的数据传递给App组件，然后App组件将新的日志添加到数组中！\n     */\n\n    /**\n     * 定义一个函数\n     */\n    const saveLogHandler = (newLog) => {\n        //向新的日志中添加id\n        newLog.id = Date.now() + ''\n        // console.log('App.js -> ', newLog)\n\n        // 将新的数据添加到数组中\n        // logsData.push(newLog)\n        setLogsData([...logsData, newLog])\n    }\n\n    /**\n     * 定义一个函数，从日志中删除一条日志\n     */\n    const delLogByIndex = (index) => {\n        // logsData.splice(index, 1)\n        setLogsData(prevState => [...prevState].slice(index,1))\n    }\n\n    return (\n        <div className=\"app\">\n            {/* 引入LogsForm组件 */}\n            <LogsForm onSaveLog={saveLogHandler}/>\n            <Logs logsData={logsData}/>\n        </div>\n    )\n}\n\nexport default App\n"],"mappings":";;AAAA,OAAOA,IAAI,MAAM,wBAAwB;AACzC,OAAOC,QAAQ,MAAM,gCAAgC;AACrD,OAAO,WAAW;AAClB,SAAQC,QAAQ,QAAO,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/B,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEd;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGN,QAAQ,CAAC,CAAC;IACtCO,EAAE,EAAE,KAAK;IACTC,IAAI,EAAE,IAAIC,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC;IAClCC,IAAI,EAAE,WAAW;IACjBC,IAAI,EAAE;EACV,CAAC,EACG;IACIJ,EAAE,EAAE,KAAK;IACTC,IAAI,EAAE,IAAIC,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IACnCC,IAAI,EAAE,aAAa;IACnBC,IAAI,EAAE;EACV,CAAC,EACD;IACIJ,EAAE,EAAE,KAAK;IACTC,IAAI,EAAE,IAAIC,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IACnCC,IAAI,EAAE,SAAS;IACfC,IAAI,EAAE;EACV,CAAC,EACD;IACIJ,EAAE,EAAE,KAAK;IACTC,IAAI,EAAE,IAAIC,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IACnCC,IAAI,EAAE,gBAAgB;IACtBC,IAAI,EAAE;EACV,CAAC,CACJ,CAAC;;EAEF;AACJ;AACA;AACA;;EAEI;AACJ;AACA;EACI,MAAMC,cAAc,GAAIC,MAAM,IAAK;IAC/B;IACAA,MAAM,CAACN,EAAE,GAAGE,IAAI,CAACK,GAAG,CAAC,CAAC,GAAG,EAAE;IAC3B;;IAEA;IACA;IACAR,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAEQ,MAAM,CAAC,CAAC;EACtC,CAAC;;EAED;AACJ;AACA;EACI,MAAME,aAAa,GAAIC,KAAK,IAAK;IAC7B;IACAV,WAAW,CAACW,SAAS,IAAI,CAAC,GAAGA,SAAS,CAAC,CAACC,KAAK,CAACF,KAAK,EAAC,CAAC,CAAC,CAAC;EAC3D,CAAC;EAED,oBACId,OAAA;IAAKiB,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAEhBlB,OAAA,CAACH,QAAQ;MAACsB,SAAS,EAAET;IAAe;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eACtCvB,OAAA,CAACJ,IAAI;MAACO,QAAQ,EAAEA;IAAS;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1B,CAAC;AAEd,CAAC;AAAArB,EAAA,CA9DKD,GAAG;AAAAuB,EAAA,GAAHvB,GAAG;AAgET,eAAeA,GAAG;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}