{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/react_study/05_React\\u7EC4\\u4EF6/src/components/User.js\";\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class User extends Component {\n  constructor(...args) {\n    super(...args);\n    /**\n     * 类组件的props是存储到类的实例对象中,\n     *    可以直接通过实例对象访问\n     *    this.props\n     * 类组件中state统一存储到了实例对象的state属性中\n     *    可以通过this.state来访问\n     *    通过this.setState()来修改state\n     *    当我们通过this.setState()修改state后时候,React只会修改设置了的属性\n     * 函数组件中,响应式函数直接以函数的形式定义在组件中,\n     *    但是在类组件中,响应函数是以类的方法来定义,之前的属性都会保留\n     *    但是这仅限于直接存储与state中的属性\n     * 获取DOM对象:\n     *    1.创建一个属性,用来存储DOM对象\n     *    2.\n     */\n    // 创建属性存储DOM对象\n    this.divRef = /*#__PURE__*/React.createRef();\n    // 向state中添加属性\n    this.state = {\n      count: 0,\n      test: '测试',\n      obj: {\n        name: '李四',\n        age: 18\n      }\n    };\n    this.clickHandler = () => {\n      // this.setState({ count: 10 })\n      // this.setState({ obj: { name: '张三' } }) // 这种直接age属性给干掉了\n      this.setState({\n        obj: {\n          ...this.state.obj,\n          name: '张三'\n        }\n      }); // 除非使用这种方式,可以解决上面的问题\n      // this.setState({ count: this.state.count + 1 })\n      // this.setState(prevState => {\n      //   return {\n      //     count: prevState.count + 1\n      //   }\n      // })\n    };\n  }\n  render() {\n    console.log(this.props);\n    console.log(this.divRef);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [this.state.count, \" - \", this.state.test]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [this.state.obj.name, \" - \", this.state.obj.age]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.clickHandler,\n        children: \"\\u70B9\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"\\u59D3\\u540D:\", this.props.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"\\u5E74\\u9F84:\", this.props.age]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"\\u6027\\u522B:\", this.props.gender]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this);\n  }\n}","map":{"version":3,"names":["React","Component","jsxDEV","_jsxDEV","User","constructor","args","divRef","createRef","state","count","test","obj","name","age","clickHandler","setState","render","console","log","props","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","gender"],"sources":["/Users/mac/Desktop/react_study/05_React组件/src/components/User.js"],"sourcesContent":["import React, { Component } from 'react'\n\nexport default class User extends Component {\n  /**\n   * 类组件的props是存储到类的实例对象中,\n   *    可以直接通过实例对象访问\n   *    this.props\n   * 类组件中state统一存储到了实例对象的state属性中\n   *    可以通过this.state来访问\n   *    通过this.setState()来修改state\n   *    当我们通过this.setState()修改state后时候,React只会修改设置了的属性\n   * 函数组件中,响应式函数直接以函数的形式定义在组件中,\n   *    但是在类组件中,响应函数是以类的方法来定义,之前的属性都会保留\n   *    但是这仅限于直接存储与state中的属性\n   * 获取DOM对象:\n   *    1.创建一个属性,用来存储DOM对象\n   *    2.\n   */\n\n  // 创建属性存储DOM对象\n  divRef = React.createRef()\n\n  // 向state中添加属性\n  state = {\n    count: 0,\n    test: '测试',\n    obj: { name: '李四', age: 18 }\n  }\n\n  clickHandler = () => {\n    // this.setState({ count: 10 })\n    // this.setState({ obj: { name: '张三' } }) // 这种直接age属性给干掉了\n    this.setState({ obj: { ...this.state.obj, name: '张三' } }) // 除非使用这种方式,可以解决上面的问题\n    // this.setState({ count: this.state.count + 1 })\n    // this.setState(prevState => {\n    //   return {\n    //     count: prevState.count + 1\n    //   }\n    // })\n  }\n\n  render() {\n    console.log(this.props)\n    console.log(this.divRef)\n    return (\n      <div>\n        <h1>\n          {this.state.count} - {this.state.test}\n        </h1>\n        <h2>\n          {this.state.obj.name} - {this.state.obj.age}\n        </h2>\n        <button onClick={this.clickHandler}>点</button>\n        <ul>\n          <li>姓名:{this.props.name}</li>\n          <li>年龄:{this.props.age}</li>\n          <li>性别:{this.props.gender}</li>\n        </ul>\n      </div>\n    )\n  }\n}\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAExC,eAAe,MAAMC,IAAI,SAASH,SAAS,CAAC;EAAAI,YAAA,GAAAC,IAAA;IAAA,SAAAA,IAAA;IAC1C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAEE;IAAA,KACAC,MAAM,gBAAGP,KAAK,CAACQ,SAAS,CAAC,CAAC;IAE1B;IAAA,KACAC,KAAK,GAAG;MACNC,KAAK,EAAE,CAAC;MACRC,IAAI,EAAE,IAAI;MACVC,GAAG,EAAE;QAAEC,IAAI,EAAE,IAAI;QAAEC,GAAG,EAAE;MAAG;IAC7B,CAAC;IAAA,KAEDC,YAAY,GAAG,MAAM;MACnB;MACA;MACA,IAAI,CAACC,QAAQ,CAAC;QAAEJ,GAAG,EAAE;UAAE,GAAG,IAAI,CAACH,KAAK,CAACG,GAAG;UAAEC,IAAI,EAAE;QAAK;MAAE,CAAC,CAAC,EAAC;MAC1D;MACA;MACA;MACA;MACA;MACA;IACF,CAAC;EAAA;EAEDI,MAAMA,CAAA,EAAG;IACPC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACC,KAAK,CAAC;IACvBF,OAAO,CAACC,GAAG,CAAC,IAAI,CAACZ,MAAM,CAAC;IACxB,oBACEJ,OAAA;MAAAkB,QAAA,gBACElB,OAAA;QAAAkB,QAAA,GACG,IAAI,CAACZ,KAAK,CAACC,KAAK,EAAC,KAAG,EAAC,IAAI,CAACD,KAAK,CAACE,IAAI;MAAA;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnC,CAAC,eACLtB,OAAA;QAAAkB,QAAA,GACG,IAAI,CAACZ,KAAK,CAACG,GAAG,CAACC,IAAI,EAAC,KAAG,EAAC,IAAI,CAACJ,KAAK,CAACG,GAAG,CAACE,GAAG;MAAA;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzC,CAAC,eACLtB,OAAA;QAAQuB,OAAO,EAAE,IAAI,CAACX,YAAa;QAAAM,QAAA,EAAC;MAAC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC9CtB,OAAA;QAAAkB,QAAA,gBACElB,OAAA;UAAAkB,QAAA,GAAI,eAAG,EAAC,IAAI,CAACD,KAAK,CAACP,IAAI;QAAA;UAAAS,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eAC7BtB,OAAA;UAAAkB,QAAA,GAAI,eAAG,EAAC,IAAI,CAACD,KAAK,CAACN,GAAG;QAAA;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eAC5BtB,OAAA;UAAAkB,QAAA,GAAI,eAAG,EAAC,IAAI,CAACD,KAAK,CAACO,MAAM;QAAA;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7B,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC;EAEV;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}