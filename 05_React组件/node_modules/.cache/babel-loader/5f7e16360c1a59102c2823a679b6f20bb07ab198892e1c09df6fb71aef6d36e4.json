{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/react_study/05_React\\u7EC4\\u4EF6/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet temp;\nconst App = () => {\n  _s();\n  /**\n   * 获取原生的DOM对象\n   *    1.可以使用传统的document来对DOM进行操作\n   *    2.直接从React处获取DOM对象\n   *      步骤:\n   *        1.创建一个存储DOM对象的容器\n   *          - 使用useRef()钩子函数\n   *              钩子函数的注意事项:\n   *                ①React中的钩子函数只能用于函数式组件或自定义钩子\n   *                ②钩子函数只能直接在函数组件中调用\n   *        2.将容器设置为想要获取DOM对象元素的ref属性\n   *          <h1 ref={xxx}>...</h1>\n   *          - React会自动将当前元素的DOM对象,设置为容器的current属性\n   *  useRef()\n   *    - 返回的就是一个普通的JS对象\n   *    - {current: undefined}\n   *    - 所以我们直接创建一个JS对象,也可以代替useRef()\n   *    - 区别:\n   *        我们创建的对象,组件每次重新渲染都会创建一个新对象\n   *        useRef()创建的对象,可以确保每次渲染获取到的都是同一个对象\n   */\n  const h1Ref = useRef(); // 创建一个容器\n  const [count, setCount] = useState(1);\n  // const h1Ref = { current: null }\n\n  console.log(temp === h1Ref);\n  temp = h1Ref;\n  const clickHandler = e => {\n    // 通过id获取h1\n    const header = document.getElementById('header');\n    // alert(header.innerText)\n    // header.innerText = '学习一下React'\n\n    console.log(h1Ref);\n    alert(h1Ref.current === header);\n  };\n  const changeHandler = () => {\n    setCount(prevState => prevState + 1);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: 'app',\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      ref: h1Ref,\n      id: \"header\",\n      children: [\"\\u6211\\u662F\\u6807\\u9898- \", count]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: clickHandler,\n      children: \"1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: changeHandler,\n      children: \"2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"nofFbGD3HuAU69ucToKU4NpkRJs=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useRef","useState","jsxDEV","_jsxDEV","temp","App","_s","h1Ref","count","setCount","console","log","clickHandler","e","header","document","getElementById","alert","current","changeHandler","prevState","className","children","ref","id","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/mac/Desktop/react_study/05_React组件/src/App.js"],"sourcesContent":["import React, { useRef, useState } from 'react'\nimport './App.css'\n\nlet temp\nconst App = () => {\n  /**\n   * 获取原生的DOM对象\n   *    1.可以使用传统的document来对DOM进行操作\n   *    2.直接从React处获取DOM对象\n   *      步骤:\n   *        1.创建一个存储DOM对象的容器\n   *          - 使用useRef()钩子函数\n   *              钩子函数的注意事项:\n   *                ①React中的钩子函数只能用于函数式组件或自定义钩子\n   *                ②钩子函数只能直接在函数组件中调用\n   *        2.将容器设置为想要获取DOM对象元素的ref属性\n   *          <h1 ref={xxx}>...</h1>\n   *          - React会自动将当前元素的DOM对象,设置为容器的current属性\n   *  useRef()\n   *    - 返回的就是一个普通的JS对象\n   *    - {current: undefined}\n   *    - 所以我们直接创建一个JS对象,也可以代替useRef()\n   *    - 区别:\n   *        我们创建的对象,组件每次重新渲染都会创建一个新对象\n   *        useRef()创建的对象,可以确保每次渲染获取到的都是同一个对象\n   */\n  const h1Ref = useRef() // 创建一个容器\n  const [count, setCount] = useState(1)\n  // const h1Ref = { current: null }\n\n  console.log(temp === h1Ref)\n\n  temp = h1Ref\n\n  const clickHandler = e => {\n    // 通过id获取h1\n    const header = document.getElementById('header')\n    // alert(header.innerText)\n    // header.innerText = '学习一下React'\n\n    console.log(h1Ref)\n    alert(h1Ref.current === header)\n  }\n\n  const changeHandler = () => {\n    setCount(prevState => prevState + 1)\n  }\n\n  return (\n    <div className={'app'}>\n      <h1\n        ref={h1Ref}\n        id=\"header\">\n        我是标题- {count}\n      </h1>\n      <button onClick={clickHandler}>1</button>\n      <button onClick={changeHandler}>2</button>\n    </div>\n  )\n}\n\nexport default App\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC/C,OAAO,WAAW;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAElB,IAAIC,IAAI;AACR,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMC,KAAK,GAAGP,MAAM,CAAC,CAAC,EAAC;EACvB,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC;EACrC;;EAEAS,OAAO,CAACC,GAAG,CAACP,IAAI,KAAKG,KAAK,CAAC;EAE3BH,IAAI,GAAGG,KAAK;EAEZ,MAAMK,YAAY,GAAGC,CAAC,IAAI;IACxB;IACA,MAAMC,MAAM,GAAGC,QAAQ,CAACC,cAAc,CAAC,QAAQ,CAAC;IAChD;IACA;;IAEAN,OAAO,CAACC,GAAG,CAACJ,KAAK,CAAC;IAClBU,KAAK,CAACV,KAAK,CAACW,OAAO,KAAKJ,MAAM,CAAC;EACjC,CAAC;EAED,MAAMK,aAAa,GAAGA,CAAA,KAAM;IAC1BV,QAAQ,CAACW,SAAS,IAAIA,SAAS,GAAG,CAAC,CAAC;EACtC,CAAC;EAED,oBACEjB,OAAA;IAAKkB,SAAS,EAAE,KAAM;IAAAC,QAAA,gBACpBnB,OAAA;MACEoB,GAAG,EAAEhB,KAAM;MACXiB,EAAE,EAAC,QAAQ;MAAAF,QAAA,GAAC,4BACN,EAACd,KAAK;IAAA;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACV,CAAC,eACLzB,OAAA;MAAQ0B,OAAO,EAAEjB,YAAa;MAAAU,QAAA,EAAC;IAAC;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACzCzB,OAAA;MAAQ0B,OAAO,EAAEV,aAAc;MAAAG,QAAA,EAAC;IAAC;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvC,CAAC;AAEV,CAAC;AAAAtB,EAAA,CAvDKD,GAAG;AAAAyB,EAAA,GAAHzB,GAAG;AAyDT,eAAeA,GAAG;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}