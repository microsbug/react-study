{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/react_study/05_React\\u7EC4\\u4EF6/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  console.log('函数执行了-- > 组件创建完毕!');\n  /**\n   * 在React中,当组件渲染完毕后,在修改组件中的变量,不会使组件重新渲染\n   *    要使得组件可以受到变量的影响,必须在组件修改后对组件进行重新渲染\n   *    这里我们就需要一个特殊的变量,当组件修改时,组件会自动重新渲染\n   *\n   * state相当于是一个变量,\n   *    只是这个变量在React中进行了注册,\n   *    React会监控这个变量的变化,当state发生变化的时候,会自动触发组件的重新渲染\n   *    使得我们的修改可以在页面中进行呈现\n   *\n   * 在函数式组件中,我们需要通过钩子函数,获取state\n   *    使用useState()函数,可以获取state\n   *      import {useState} from 'react'\n   *    它需要一个值作为参数,这个值就是state的初始值\n   *      - 该函数会返回一个数组\n   *        1.数组中的第一个元素就是初始值\n   *          初始值只用来显示数据,直接修改不会触发组件的重新渲染\n   *        2.数组中的第二个元素就是一个函数,这个函数可以修改state的值,通常命名为setXxx,调用其修改state会触发组件的重新渲染,\n   *            并且使用函数中的值作为新的state\n   */\n\n  /**\n   * state:\n   *  - state实际上就是一个被React管理的变量\n   *      当我们通过setState()函数修改state的值,会触发组件的重新渲染\n   *  - 只有state值发生变化时,组件才会重新渲染\n   */\n\n  // 将下述简写\n  /* const result = useState(1)\n  let counter = result[0]\n  let setCounter = result[1] */\n  const [counter, setCounter] = useState(1);\n  const [user, setUser] = useState({\n    name: '张三',\n    age: 18\n  });\n\n  /**\n   * 当点击+时,数字增大\n   * 当点击-时,数字减小\n   */\n\n  // 创建一个变量存储数据\n  // let counter = 1\n  const addHandler = () => {\n    // counter++\n    setCounter(counter + 1);\n    console.log(counter);\n    /* const h1 = document.querySelector('h1')\n    const num = parseInt(h1.innerText)\n    h1.innerText = num + 1 */\n  };\n  const subHandler = () => {\n    // counter--\n    setCounter(counter - 1);\n    console.log(counter);\n    /* const h1 = document.querySelector('h1')\n    const num = parseInt(h1.innerText)\n    h1.innerText = num - 1 */\n  };\n  const updateUserHandler = () => {\n    setUser({\n      name: '李四',\n      age: 20\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [counter, \" -- \", user.name, \" -- \", user.age]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addHandler,\n      children: \"+\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: subHandler,\n      children: \"-\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: updateUserHandler,\n      children: \"\\u4FEE\\u6539\\u7528\\u6237\\u4FE1\\u606F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"sLH/y0AlKDZvjFKls/ceD+apPIA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","App","_s","console","log","counter","setCounter","user","setUser","name","age","addHandler","subHandler","updateUserHandler","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/mac/Desktop/react_study/05_React组件/src/App.js"],"sourcesContent":["import { useState } from 'react'\nimport './App.css'\nconst App = () => {\n  console.log('函数执行了-- > 组件创建完毕!')\n  /**\n   * 在React中,当组件渲染完毕后,在修改组件中的变量,不会使组件重新渲染\n   *    要使得组件可以受到变量的影响,必须在组件修改后对组件进行重新渲染\n   *    这里我们就需要一个特殊的变量,当组件修改时,组件会自动重新渲染\n   *\n   * state相当于是一个变量,\n   *    只是这个变量在React中进行了注册,\n   *    React会监控这个变量的变化,当state发生变化的时候,会自动触发组件的重新渲染\n   *    使得我们的修改可以在页面中进行呈现\n   *\n   * 在函数式组件中,我们需要通过钩子函数,获取state\n   *    使用useState()函数,可以获取state\n   *      import {useState} from 'react'\n   *    它需要一个值作为参数,这个值就是state的初始值\n   *      - 该函数会返回一个数组\n   *        1.数组中的第一个元素就是初始值\n   *          初始值只用来显示数据,直接修改不会触发组件的重新渲染\n   *        2.数组中的第二个元素就是一个函数,这个函数可以修改state的值,通常命名为setXxx,调用其修改state会触发组件的重新渲染,\n   *            并且使用函数中的值作为新的state\n   */\n\n  /**\n   * state:\n   *  - state实际上就是一个被React管理的变量\n   *      当我们通过setState()函数修改state的值,会触发组件的重新渲染\n   *  - 只有state值发生变化时,组件才会重新渲染\n   */\n\n  // 将下述简写\n  /* const result = useState(1)\n  let counter = result[0]\n  let setCounter = result[1] */\n  const [counter, setCounter] = useState(1)\n  const [user, setUser] = useState({ name: '张三', age: 18 })\n\n  /**\n   * 当点击+时,数字增大\n   * 当点击-时,数字减小\n   */\n\n  // 创建一个变量存储数据\n  // let counter = 1\n  const addHandler = () => {\n    // counter++\n    setCounter(counter + 1)\n    console.log(counter)\n    /* const h1 = document.querySelector('h1')\n    const num = parseInt(h1.innerText)\n    h1.innerText = num + 1 */\n  }\n\n  const subHandler = () => {\n    // counter--\n    setCounter(counter - 1)\n    console.log(counter)\n    /* const h1 = document.querySelector('h1')\n    const num = parseInt(h1.innerText)\n    h1.innerText = num - 1 */\n  }\n\n  const updateUserHandler = () => {\n    setUser({ name: '李四', age: 20 })\n  }\n\n  return (\n    <div className=\"app\">\n      <h1>\n        {counter} -- {user.name} -- {user.age}\n      </h1>\n      <button onClick={addHandler}>+</button>\n      <button onClick={subHandler}>-</button>\n      <br />\n      <button onClick={updateUserHandler}>修改用户信息</button>\n    </div>\n  )\n}\n\nexport default App\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAO,WAAW;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAClB,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChBC,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;EAChC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;;EAEE;EACA;AACF;AACA;EACE,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC;EACzC,MAAM,CAACS,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC;IAAEW,IAAI,EAAE,IAAI;IAAEC,GAAG,EAAE;EAAG,CAAC,CAAC;;EAEzD;AACF;AACA;AACA;;EAEE;EACA;EACA,MAAMC,UAAU,GAAGA,CAAA,KAAM;IACvB;IACAL,UAAU,CAACD,OAAO,GAAG,CAAC,CAAC;IACvBF,OAAO,CAACC,GAAG,CAACC,OAAO,CAAC;IACpB;AACJ;AACA;EACE,CAAC;EAED,MAAMO,UAAU,GAAGA,CAAA,KAAM;IACvB;IACAN,UAAU,CAACD,OAAO,GAAG,CAAC,CAAC;IACvBF,OAAO,CAACC,GAAG,CAACC,OAAO,CAAC;IACpB;AACJ;AACA;EACE,CAAC;EAED,MAAMQ,iBAAiB,GAAGA,CAAA,KAAM;IAC9BL,OAAO,CAAC;MAAEC,IAAI,EAAE,IAAI;MAAEC,GAAG,EAAE;IAAG,CAAC,CAAC;EAClC,CAAC;EAED,oBACEV,OAAA;IAAKc,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBf,OAAA;MAAAe,QAAA,GACGV,OAAO,EAAC,MAAI,EAACE,IAAI,CAACE,IAAI,EAAC,MAAI,EAACF,IAAI,CAACG,GAAG;IAAA;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnC,CAAC,eACLnB,OAAA;MAAQoB,OAAO,EAAET,UAAW;MAAAI,QAAA,EAAC;IAAC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACvCnB,OAAA;MAAQoB,OAAO,EAAER,UAAW;MAAAG,QAAA,EAAC;IAAC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACvCnB,OAAA;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACNnB,OAAA;MAAQoB,OAAO,EAAEP,iBAAkB;MAAAE,QAAA,EAAC;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChD,CAAC;AAEV,CAAC;AAAAjB,EAAA,CA7EKD,GAAG;AAAAoB,EAAA,GAAHpB,GAAG;AA+ET,eAAeA,GAAG;AAAA,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}